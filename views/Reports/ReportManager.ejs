<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quản lý người dùng</title>
    <link rel="stylesheet" href="../../assets/style/UserManagement.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.3/css/lightbox.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.3/js/lightbox.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.js"></script>
</head>
<style>
    .status-pending {
        color: #f4d03f;
    }

    .status-completed {
        color: #28a745;
    }

    .status-rejected {
        color: #f20;
    }

    .status-unknown {
        color: #b0b0b0;
    }

    th:nth-child(5),
    td:nth-child(5) {
        width: 60%;
    }

    .issue-type {
        border: 1px solid #d3d3d3;
        padding: 5px;
        border-radius: 4px;
        display: inline-block;
        width: 70%;
        text-align: center;
        margin: 0 auto;
    }

    .issue-type-detail {
        border: 1px solid #d3d3d3;
        display: inline-block;
        width: 148px;
        text-align: center;
        padding: 2.5px 0 2.5px 0;
        margin: 0 auto;
        font-weight: bold;
        color: #007bff;
        font-size: small;
    }

    .table tbody tr {
        border-bottom: 1px solid #d3d3d3;
    }

    .table tbody tr td {
        vertical-align: middle;
    }

    .search-input {
        border-radius: 5px;
        margin-right: 5px;
        border: 1px solid #d3d3d3;
        height: 33px;
        width: 100%;
        padding-right: 24px;
    }

    .border-bottom {
        border-bottom: 1px solid #d3d3d3;
    }

    .action-btn {
        width: 70px;
        text-align: center;
        padding: 5px 0;
    }

    .view-btn {
        background-color: transparent;
        border: 1px solid #28a745;
        color: #28a745;
    }

    .view-btn-pending {
        background-color: #f8d568;
        border: 1px solid #f8d568;
        color: #fff;
    }

    .pagination button {
        margin: 0 5px;
        padding: 5px 10px;
    }

    .pagination button.active {
        background-color: #007bff;
        color: white;
    }

    .pagination button:disabled {
        background-color: #d3d3d3;
        cursor: not-allowed;
    }

    .search-icon {
        margin-right: -12px;
        padding: 5px;
        color: #ffffff;
    }

    .button-search {
        background-color: #007bff;
        border: none;
        padding-left: 10px;
        padding-right: 10px;
        border-radius: 5px;
    }

    .input-container {
        position: relative;
        width: 100%;
        margin-right: 10px;
    }

    .clear-button {
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        color: #aaa;
        font-size: 18px;
        cursor: pointer;
        border: none;
        display: none;
    }

    .search-input:not(:placeholder-shown)+.clear-button {
        display: inline;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 100%;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover,
    .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }

    .report-detail-label {
        display: inline-block;
        width: 120px;
        font-weight: bold;
    }
</style>

<body>

    <div class="container">
        <div class="table-container">
            <h4>Quản lý báo cáo</h4>
            <div class="search-input-container1 d-flex align-items-center">
                <div class="dropdown input-spacing"> <!-- Thêm lớp input-spacing -->
                    <button id="issueTypeButton" class="btn text-white shadow-button dropdown-toggle"
                        style="font-size: 0.75rem; background-color: #007bff; width: 100px;" data-toggle="dropdown"
                        aria-haspopup="true" aria-expanded="false">
                        Loại vấn đề
                    </button>
                    <div class="dropdown-menu" aria-labelledby="issueTypeButton">
                        <a class="dropdown-item " href="#"
                            onclick="updateDropdownText('issueTypeButton', 'Loại vấn đề'); filterByType('Unknown')">Loại
                            vấn đề</a>
                        <a class="dropdown-item border-bottom" href="#"
                            onclick="updateDropdownText('issueTypeButton', 'Bài đăng'); filterByType('post')">Bài
                            đăng</a>
                        <a class="dropdown-item border-bottom" href="#"
                            onclick="updateDropdownText('issueTypeButton', 'Phòng ở'); filterByType('room')">Phòng ở</a>
                        <a class="dropdown-item" href="#"
                            onclick="updateDropdownText('issueTypeButton', 'Dịch vụ'); filterByType('service')">Dịch
                            vụ</a>
                    </div>
                </div>
                <div class="dropdown input-spacing">
                    <button id="statusButton" class="btn text-white shadow-button dropdown-toggle"
                        style="font-size: 0.75rem; background-color: #007bff; width: 100px;" data-toggle="dropdown"
                        aria-haspopup="true" aria-expanded="false">
                        Trạng thái
                    </button>
                    <div class="dropdown-menu" aria-labelledby="statusButton">
                        <a class="dropdown-item border-bottom" href="#"
                            onclick="updateDropdownText('statusButton', 'Trạng thái'); filterByStatus(-1)">Trạng
                            thái</a>
                        <a class="dropdown-item border-bottom" href="#"
                            onclick="updateDropdownText('statusButton', 'Chưa xử lý'); filterByStatus(0)">Chưa xử lý</a>
                        <a class="dropdown-item " href="#"
                            onclick="updateDropdownText('statusButton', 'Đã xử lý'); ; filterByStatus(1)">Đã xử lý</a>
                    </div>
                </div>
                <div class="search-input-container">
                    <!-- <input type="text" id="search-input" placeholder="Nhập tên để tìm kiếm" class="search-input" /> -->
                    <div class="input-container">
                        <input type="text" id="search-input" placeholder="Nhập tên để tìm kiếm" class="search-input" />
                        <span id="clear-button" class="clear-button" onclick="clearInput()">×</span>
                    </div>
                    <button class="button-search" onclick="filterByName(document.getElementById('search-input').value)">
                        <!-- &#128269; -->
                        <i class="fas fa-search" style="color: #ffffff;"></i>
                    </button>
                </div>
            </div>


            <table class="table">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Người tạo báo cáo</th>
                        <th>Tiêu đề</th>
                        <th>Ngày tạo</th>
                        <th>Loại vấn đề</th>
                        <th style="width: 100px;">Trạng thái</th>
                        <th style="width: 100px;">Act</th>
                    </tr>
                </thead>
                <tbody id="report-table-body">
                    <!-- Dữ liệu người dùng sẽ được thêm vào đây -->
                </tbody>
            </table>
            <div class="pagination" id="pagination">
                <!-- Dữ liệu phân trang sẽ được thêm vào đây -->
            </div>
        </div>

        <!-- Modal cho chi tiết báo cáo -->
        <div id="reportDetailsModal" class="modal" style="display: none;">
            <div class="modal-content">
                <div class="d-flex align-items-center justify-content-between w-100">
                    <span class="close mb-1 text-dark" style="color: black;"
                        onclick="closeReportDetails()">&times;</span>

                    <h4 class="mb-0 flex-grow-1 text-center" style="margin-left: -30px;">Báo cáo</h4>
                </div>

                <p class="mt-2" id="reportDetails"></p>
                <p class="mt-2" id="infoDetails"></p>
                <p class="mt-2" id="contactDetails"></p>
            </div>
        </div>
    </div>

    <!-- Add jQuery, Popper.js, and Bootstrap JavaScript in the correct order -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        let reports = [];
        let selectedType = '';
        let selectedStatus = -1;
        let searchText = '';
        let page = 1;
        const pageSize = 6;

        // Function to fetch report data
        const fetchReports = async () => {
            try {
                const response = await fetch('http://localhost:3000/api/reports_all');
                const data = await response.json();
                if (response.ok) {
                    reports = data;
                    console.log(reports)
                    renderTable();
                } else {
                    throw new Error(`HTTP error! status: ${response.status}`);
                    Toastify({
                        text: "Failed to load reports",
                        style: {
                            background: "linear-gradient(to right, #ff5f6d, #ffc371)"
                        }
                    }).showToast();
                }
            } catch (error) {
                console.error("Error fetching reports:", error);
            }
        };

        function updateDropdownText(buttonId, text) {
            document.getElementById(buttonId).innerText = text;
        }

        const filterByType = (type) => {
            selectedType = type === 'Unknown' ? '' : type; // Reset if 'Unknown' is selected
            renderTable();
        };

        const filterByStatus = (status) => {
            selectedStatus = status === -1 ? -1 : status; // Reset if -1 is selected
            renderTable();
        };

        const filterByName = (name) => {
            searchText = document.getElementById('search-input').value.trim().toLowerCase();
            renderTable();
        };
        function clearInput() {
            document.getElementById("search-input").value = "";
            document.getElementById("clear-button").style.display = "none"; // Ẩn nút "X" sau khi xóa
            searchText = ''
            renderTable();
        }

        // Function to render report table
        const renderTable = () => {
            const filteredReports = reports.filter(report =>
                (selectedType === '' || report.type === selectedType) &&
                (selectedStatus === -1 || report.status === selectedStatus) &&
                (searchText === '' || (report.user_id.name ?? '').toLowerCase().includes(searchText))
            );

            const displayReports = filteredReports.slice(
                (page - 1) * pageSize,
                page * pageSize
            );

            const reportTable = document.getElementById('report-table-body');
            reportTable.innerHTML = '';

            displayReports.forEach((report, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${index + 1 + (page - 1) * pageSize}</td>
                    <td>${report.user_id.name ?? 'N/A'}</td>
                    <td>${report.title_support ?? 'N/A'}</td>
                    <td>${report.created_at ?? 'N/A'}</td>
                    <td>${getIssueType(report.type) ?? 'N/A'}</td>
                    <td>${getStatus(report.status) ?? 'N/A'}</td>
                    <td>
                        <button  class="btn btn-primary btn-sm action-btn ${report.status === 1 ? 'view-btn' : 'view-btn-pending'}" onclick="toggleEditForm('${report._id}')">
                            ${report.status === 0 ? 'Xử lý' : 'Xem'}
                        </button>
                    </td>
                `;
                reportTable.appendChild(row);
            });
            const totalPages = Math.ceil(filteredReports.length / pageSize);
            renderPagination(totalPages);
        };
        function getIssueType(type) {
            switch (type) {
                case 'room':
                    return '<span class="issue-type">Phòng ở</span>';
                case 'service':
                    return '<span class="issue-type">Dịch Vụ</span>';
                case 'post':
                    return '<span class="issue-type">Bài Đăng</span>';
                default:
                    return '<span class="issue-type">Unknown</span>';
            }
        }
        function getStatus(status) {
            switch (status) {
                case 0:
                    return '<span class="status-pending">Chưa xử lý</span>';
                case 1:
                    return '<span class="status-completed">Đã xử lý</span>';
                default:
                    return '<span class="status-unknown">Unknown</span>';
            }
        }

        function getStatusDetail(status) {
            switch (status) {
                case 0:
                    return '<span class="status-pending" style="display: inline-block; width: 99px; text-align: center;">Chưa xử lý</span>';
                case 1:
                    return '<span class="status-completed" style="display: inline-block; width: 99px; text-align: center;">Đã xử lý</span>';
                default:
                    return '<span class="status-unknown" style="display: inline-block; width: 99px; text-align: center;">Unknown</span>';
            }
        }

        // Function to render pagination
        const renderPagination = (totalPages) => {
            const paginationContainer = document.getElementById('pagination');
            paginationContainer.innerHTML = '';

            // Render Previous Button
            const prevButton = document.createElement('button');
            prevButton.innerText = '«';
            prevButton.classList.add('btn', 'btn-secondary', 'btn-sm');
            prevButton.disabled = page === 1;
            prevButton.onclick = () => changePage(page - 1);
            paginationContainer.appendChild(prevButton);

            // Render Page Buttons
            for (let i = 1; i <= totalPages; i++) {
                const pageButton = document.createElement('button');
                pageButton.innerText = i;
                pageButton.classList.add('btn', 'btn-secondary', 'btn-sm');
                pageButton.onclick = () => changePage(i);
                if (i === page) {
                    pageButton.classList.add('active');
                }
                paginationContainer.appendChild(pageButton);
            }

            // Render Next Button
            const nextButton = document.createElement('button');
            nextButton.innerText = '»';
            nextButton.classList.add('btn', 'btn-secondary', 'btn-sm');
            nextButton.disabled = page === totalPages;
            nextButton.onclick = () => changePage(page + 1);
            paginationContainer.appendChild(nextButton);
        };
        // Function to change page
        const changePage = (newPage) => {
            page = newPage;
            renderTable();
        };
        fetchReports();

        // ================= details =========================

        async function toggleEditForm(reportId) {
            try {
                // Show the modal
                document.getElementById("reportDetailsModal").style.display = 'block';

                // Make the API request to fetch report details based on reportId
                const response = await fetch(`http://localhost:3000/api/get_report_details/${reportId}`);

                if (response.ok) {
                    // Parse the response JSON
                    const result = await response.json();

                    // If the API returns data, render it on the page
                    console.log(result); // You can check the structure of the response here
                    const { data, dataDetails, dataRoom4Service } = result;
                    console.log("typeee :", data.type)
                    // Call a function to render the report details in your modal
                    showReportDetails(data, dataDetails, data.type, dataRoom4Service);
                } else {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
            } catch (error) {
                console.error("Error fetching report details:", error);
                Toastify({
                    text: "Failed to load report details",
                    style: {
                        background: "linear-gradient(to right, #ff5f6d, #ffc371)"
                    }
                }).showToast();
            }
        }

        function showReportDetails(data, dataDetails, type, dataRoom4Service) {
            let reportStatusUpdate = null;

            const roomDetail = type === "room" ? `
            <div class="mb-2"><span class="report-detail-label">Số phòng:</span> ${dataDetails.room_name ?? 'N/A'} , ${dataDetails.building_id.name}</div>
            <div class="mb-2"><span class="report-detail-label">Địa chỉ:</span> ${dataDetails.building_id.address ?? 'N/A'}</div>
            ` : '';

            const serviceDetail = type === "service" ? `
            <div class="mb-2"><span class="report-detail-label">Số phòng:</span> ${dataRoom4Service.room_id.room_name ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Địa chỉ:</span> ${dataRoom4Service.room_id.building_id.address ?? 'N/A'}</div>
            ` : '';

            // ==================

            const roomManagerContact = type === "room" ? `
            <div class="mb-2"><span class="report-detail-label">Họ và tên:</span> ${dataDetails.building_id.landlord_id.name ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Điện thoại:</span> ${dataDetails.building_id.landlord_id.phoneNumber ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Email:</span> ${dataDetails.building_id.landlord_id.email ?? 'N/A'}</div>
            
            ` : '';
            const serviceManagerContact = type === "service" ? `
            <div class="mb-2"><span class="report-detail-label">Họ và tên:</span> ${dataDetails.landlord_id.name ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Điện thoại:</span> ${dataDetails.landlord_id.phoneNumber ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Email:</span> ${dataDetails.landlord_id.email ?? 'N/A'}</div>
            ` : '';

            const postContact = type === "post" ? `
            <div class="mb-2"><span class="report-detail-label">Họ và tên:</span> ${dataDetails.user_id.name ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Điện thoại:</span> ${dataDetails.user_id.phoneNumber ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Email:</span> ${dataDetails.user_id.email ?? 'N/A'}</div>
            ` : '';

            // ==================

            const isRoom = type === "room" ? `
            <h6 class="mb-3 flex-grow-1" style="color: #007bff;">Thông tin phòng :</h6>
            <div class="mb-2"><span class="report-detail-label">Loại phòng:</span> ${dataDetails.room_type ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Tên phòng:</span> ${dataDetails.room_name ?? 'N/A'} , ${dataDetails.building_id.name}</div>
            <div class="mb-2"><span class="report-detail-label">Mô tả:</span> ${dataDetails.description ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Giá:</span> ${dataDetails.price ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Tình trạng:</span> ${getContractStatus(dataDetails.status) ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Diện tích:</span> ${dataDetails.size ?? 'N/A'}</div>

            <div class="d-flex mb-3">
                <span class="report-detail-label">Video:</span> 
                <div class="d-flex flex-wrap">
                    ${dataDetails.video_room ? `
                        <a href="${dataDetails.video_room}" data-lightbox="report-media" data-title="Video">
                            <video controls class="img-thumbnail mr-2" style="max-height: 100px; max-width: 100px;">
                                <source src="${dataDetails.video_room}" type="video/mp4">
                                Your browser does not support the video tag.
                            </video>
                        </a>
                    ` : 'N/A'}
                </div>
            </div>

            <div class="d-flex mb-3 border-bottom pb-4">
                <span class="report-detail-label">Hình ảnh:</span> 
                <div class="d-flex flex-wrap">
                    ${dataDetails.photos_room?.map((imageUrl, index) => `
                        <a href="${imageUrl}" data-lightbox="report-media" data-title="Hình ảnh ${index + 1}">
                            <img src="${imageUrl}" alt="Image" class="img-thumbnail mr-2" style="max-height: 100px; max-width: 100px;">
                        </a>
                    `).join('')}
                </div>    
            </div>
            <h6 class="mb-3 flex-grow-1" style="color: #007bff;">Thông tin người quản lý :</h6>
               ${roomManagerContact}
           
            ` : '';

            const isService = type === "service" ? `
            <h6 class="mb-3 flex-grow-1" style="color: #007bff;">Thông dịch vụ :</h6>
            <div class="mb-2"><span class="report-detail-label">Tên dịch vụ:</span> ${dataDetails.name ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Mô tả:</span> ${dataDetails.description ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Giá:</span> ${dataDetails.price ?? 'N/A'}</div>
            <div class="d-flex mb-3 border-bottom pb-4">
                <span class="report-detail-label">Hình ảnh:</span> 
                <div class="d-flex flex-wrap">
                    ${dataDetails.photos?.map((imageUrl, index) => `
                        <a href="${imageUrl}" data-lightbox="report-media" data-title="Hình ảnh ${index + 1}">
                            <img src="${imageUrl}" alt="Image" class="img-thumbnail mr-2" style="max-height: 100px; max-width: 100px;">
                        </a>
                    `).join('')}
                </div>    
            </div>

            <h6 class="mb-3 flex-grow-1" style="color: #007bff;">Thông tin người quản lý :</h6>
            ${serviceManagerContact}
            ` : '';

            const isPost = type === "post" ? ` 
            <h6 class="mb-3 flex-grow-1" style="color: #007bff;">Thông bài đăng :</h6>
            <div class="mb-2"><span class="report-detail-label">Trạng thái:</span> ${getStatusPost(dataDetails.status) ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Loại:</span> ${getPostType(dataDetails.post_type) ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Tiêu đề:</span> ${dataDetails.title ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Nội dung:</span> ${dataDetails.content ?? 'N/A'}</div>

            ${dataDetails.video ? `
                <div class="d-flex mb-3">
                    <span class="report-detail-label">Video:</span> 
                    <div class="d-flex flex-wrap">
                        <a href="${dataDetails.video}" data-lightbox="report-media" data-title="Video">
                            <video controls class="img-thumbnail mr-2" style="max-height: 100px; max-width: 100px;">
                                <source src="${dataDetails.video}" type="video/mp4">
                                Your browser does not support the video tag.
                            </video>
                        </a>
                    </div>
                </div>
            ` : ''}

            ${dataDetails.photo && dataDetails.photo.length > 0 ? `
                <div class="d-flex mb-3">
                    <span class="report-detail-label">Hình ảnh:</span> 
                    <div class="d-flex flex-wrap">
                        ${dataDetails.photo.map((imageUrl, index) => `
                            <a href="${imageUrl}" data-lightbox="report-media" data-title="Hình ảnh ${index + 1}">
                                <img src="${imageUrl}" alt="Image" class="img-thumbnail mr-2" style="max-height: 100px; max-width: 100px;">
                            </a>
                        `).join('')}
                    </div>    
                </div>
            ` : ''}
            
            <div class="mb-3 border-bottom pb-4 d-flex justify-content-between align-items-center">
                <div class=""><span class="report-detail-label">Thời gian đăng:</span> ${dataDetails.created_at ?? 'N/A'}</div>
                ${dataDetails.status !== 2 ? `
                   <button class="btn btn-danger btn-sm" 
                        onclick="banPost('${dataDetails._id}','${data._id}', '${2}'); 
                        sendNotification('${data.user_id._id}', 'Phản hồi báo cáo', '${`Vấn đề bạn đã báo cáo (${data.title_support}) hiện đã được giải quyết. Xin cảm ơn bạn đã thông báo và đồng hành cùng chúng tôi!`}');
                        sendNotification('${dataDetails.user_id._id}', '${"Thông báo bài đăng vi phạm"}', 'Chúng tôi đã cấm đăng bài viết của bạn gần đây do vấn đề vi phạm quy tắc cộng đồng')">
                        Cấm Đăng
                   </button>
                ` : `
                   <button class="btn btn-warning btn-sm text-white" onclick="banPost('${dataDetails._id}','${data._id}', '${0}'); ">Hủy Cấm Đăng</button>
                `}
                
            </div>
            

            <h6 class="mb-3 flex-grow-1" style="color: #007bff;">Người đăng bài viết :</h6>
            ${postContact}
            ` : '';

            // ==================

            const reportDetails = `
            <h6 class="mb-3 flex-grow-1" style="color: #007bff">Người báo cáo :</h6>
            <div class="mb-2"><span class="report-detail-label">Họ và tên:</span> ${data.user_id.name ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Điện thoại:</span> ${data.user_id.phoneNumber ?? 'N/A'}</div>
            <div class="mb-3 pb-3 border-bottom"><span class="report-detail-label">Email:</span> ${data.user_id.email ?? 'N/A'}</div>
            
            <h6 class="mb-3 flex-grow-1" style="color: #007bff;">Thông tin báo cáo :</h6>
            <div class="mb-2"><span class="report-detail-label">Thời gian tạo:</span> ${data.created_at ?? 'N/A'}</div>
            <div><span class="report-detail-label">Loại vấn đề:</span> ${getIssueDetail(data.type)}</div>
            <div class="my-2">
                <span class="report-detail-label">Trạng thái:</span>
                <span class="border px-4 py-1 text-muted small fw-bold">${getStatusDetail(data.status) ?? 'N/A'}</span>
            </div>
            ${roomDetail}
            ${serviceDetail}
            <div class="mb-2"><span class="report-detail-label">Tiêu đề:</span> ${data.title_support ?? 'N/A'}</div>
            <div class="mb-2"><span class="report-detail-label">Nội dung:</span> ${data.content_support ?? 'N/A'}</div>
            <div class="d-flex mb-3 border-bottom pb-4">
                <span class="report-detail-label">Hình ảnh:</span> 
                <div class="d-flex flex-wrap">
                    ${data.image?.map((imageUrl, index) => `
                        <a href="${imageUrl}" data-lightbox="report-media" data-title="Hình ảnh thêm ${index + 1}">
                            <img src="${imageUrl}" alt="Image" class="img-thumbnail mr-2" style="max-height: 100px; max-width: 100px;">
                        </a>
                    `).join('')}
                </div>
            </div>

            ${isRoom}
            ${isService}
            ${isPost}
            <div style="text-align: center; margin-top: 60px;">
                <button style="width: 150px; height: 40px; margin-right: 20px;" class="btn btn-secondary" onclick="closeReportDetails()">Thoát</button>
                <button style="width: 150px; height: 40px;" class="btn btn-primary" onclick="toggleStatusDropdown()">Cập nhật</button>
            </div>
            <div id="statusDropdown" class="border mt-3 px-2 py-2 align-items-center" style="display: none; width: 340px; margin: 0 auto; text-align: center;">
                <span class="report-detail-label" style="width: 150px">Trạng thái hiện tại:</span>
                <span class="border px-4 py-1 text-muted small fw-bold mx-2">${getStatusDetail(data.status) ?? 'N/A'}</span>
                
                <div style="align-items: center;" class="mt-4">
                    <select id="statusSelect" style="width: 150px; padding: 3px;" class="border">
                        <option value="">-- Chọn --</option>
                        <option value="0">Chưa xử lý</option>
                        <option value="1">Đã xử lý</option>
                    </select>
                    <button id="saveButton" class="btn btn-primary" style="margin-left: 10px; width: 148px;" 
                        onclick="updateReportStatus('${data._id}', '${data.user_id._id}', '${data.title_support}')">
                        Lưu
                    </button>
                </div>
            </div>
            `;

            document.getElementById('reportDetails').innerHTML = reportDetails;
            document.getElementById('infoDetails').innerHTML = "";
            document.getElementById('statusSelect').addEventListener('change', function () {
                reportStatusUpdate = this.value ? parseInt(this.value) : null;
                updateSaveButtonState();
            });


            function updateSaveButtonState() {
                const saveButton = document.getElementById('saveButton');
                if (reportStatusUpdate === null) {
                    saveButton.disabled = true;
                    saveButton.style.cursor = 'not-allowed';  // Add prohibition icon
                    saveButton.classList.add('btn-disabled');  // Optionally add a 'disabled' style class
                } else {
                    saveButton.disabled = false;
                    saveButton.style.cursor = 'pointer'; // Restore normal cursor
                    saveButton.classList.remove('btn-disabled');
                }
            }
            updateSaveButtonState();
        }

        function closeReportDetails() {
            document.getElementById('reportDetailsModal').style.display = 'none'; // Đóng modal
        }

        function getIssueDetail(type) {
            switch (type) {
                case 'room':
                    return '<span class="issue-type-detail">Phòng ở</span>';
                case 'service':
                    return '<span class="issue-type-detail">Dịch Vụ</span>';
                case 'post':
                    return '<span class="issue-type-detail">Bài Đăng</span>';
                default:
                    return '<span class="issue-type-detail">Unknown</span>';
            }
        }
        function getContractStatus(status) {
            switch (status) {
                case 0:
                    return '<span class="status-completed">Đang cho thuê</span>';
                case 1:
                    return '<span class="status-pending">Hết hạn</span>';
                default:
                    return '<span class="status-pending">Unknown</span>';
            }
        }
        function getPostType(type) {
            switch (type) {
                case "roomate":
                    return '<span class="status-completed">Tìm người ở ghép</span>';
                case "rent":
                    return '<span class="status-completed">Cho thuê nhà</span>';
                case "seek":
                    return '<span class="status-completed">Tìm thuê nhà</span>';
                // case "rejected":
                //     return '<span class="status-rejected">Bài đăng vi phạm</span>';
                default:
                    return '<span class="status-pending">Unknown</span>';
            }
        }

        function getStatusPost(status) {
            switch (status) {
                case 0:
                    return '<span style="background-color: #28a745; color: white; padding: 0px 10px; border-radius: 5px; display: inline-flex; align-items: center;">Bài viết đang hoạt động</span>';
                case 1:
                    return '<span style="background-color: #ffc107; color: white; padding: 0px 10px; border-radius: 5px; display: inline-flex; align-items: center;">Bài viết đã ẩn</span>';
                case 2:
                    return '<span style="background-color: #dc3545; color: white; padding: 0px 10px; border-radius: 5px; display: inline-flex; align-items: center;">Đã bị cấm đăng</span>';
                default:
                    return '<span style="background-color: #6c757d; color: white; padding: 2px 10px; border-radius: 5px; display: inline-flex; align-items: center;">Unknown</span>';
            }
        }

        function toggleStatusDropdown() {
            const dropdown = document.getElementById("statusDropdown");
            dropdown.style.display = dropdown.style.display === "none" ? "block" : "none";
        }

        async function banPost(postId, reportId, sts) {
            const isConfirmed = confirm(`${parseInt(sts) === 2 ? "Xác nhận cấm đăng bài viết này ?" : "Xác nhận hủy cấm đăng bài viết này !!!"}`);
            if (isConfirmed) {
                try {
                    const res = await fetch(`http://localhost:3000/api/post_update_status/${postId}`, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ status: parseInt(sts) })
                    })
                    const resReport = await fetch(`http://localhost:3000/api/report/${reportId}`, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ status: parseInt(1) })
                    });

                    if (res.ok && resReport.ok) {
                        toggleEditForm(reportId)
                        Toastify({
                            text: "Post has been banned",
                            style: { background: "linear-gradient(to right, #007bff, #00b8d8)" }
                        }).showToast();
                    } else {
                        Toastify({
                            text: "Post ban failed",
                            style: { background: "linear-gradient(to right, #ff5f6d, #ffc371)" }
                        }).showToast();
                    }
                } catch (error) {
                    console.error("Error updating status:", error);
                    alert("An error occurred while updating the status");
                }
            }
        }

        async function updateReportStatus(reportId, userId, problem) {
            const selectedStatus = document.getElementById("statusSelect").value;
            try {
                const response = await fetch(`http://localhost:3000/api/report/${reportId}`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ status: parseInt(selectedStatus) })
                });

                if (response.ok) {
                    const result = await response.json();
                    if(parseInt(selectedStatus) === 1){
                        sendNotification(userId, "Phản hồi báo cáo", `Vấn đề bạn đã báo cáo (${problem}) hiện đã được giải quyết. Xin cảm ơn bạn đã thông báo và đồng hành cùng chúng tôi!`)
                    }
                    toggleEditForm(reportId)
                    Toastify({
                        text: "Update successfully",
                        style: { background: "linear-gradient(to right, #007bff, #00b8d8)" }
                    }).showToast();
                    document.getElementById("statusDropdown").style.display = "none";
                } else {
                    Toastify({
                        text: "Failed to update",
                        style: { background: "linear-gradient(to right, #ff5f6d, #ffc371)" }
                    }).showToast();
                }
            } catch (error) {
                console.error("Error updating status:", error);
                alert("An error occurred while updating the status");
            }
        }

        async function sendNotification(userId, title, content) {
            try {
                const res = await fetch(`http://localhost:3000/api/notification_reply`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        user_id: userId,
                        title: title,
                        content: content
                    })
                })
                if (res.ok) {
                    console.log("Send notification successfully")
                } else {
                    console.log("Send notification failed")
                }
            } catch (error) {
                console.error("Send notification error:", error);
            }
        }

    </script>
</body>

</html>