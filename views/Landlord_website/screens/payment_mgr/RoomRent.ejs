<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/css/bootstrap-datepicker.min.css"
        rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/js/bootstrap-datepicker.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.js"></script>
    <title>Document</title>
    <style>
        .selected {
            border: 2px solid #007bff;
            background-color: #f0f8ff;
        }

        .tab-menu {
            display: flex;
            justify-content: space-between;
            width: 100%;
            border-bottom: 1px solid #ccc;
        }

        .tab-item {
            width: 50%;
            text-align: center;
            padding: 10px 0;
            cursor: pointer;
            border-bottom: 3px solid transparent;
            color: #6c757d;
            font-weight: bold;
            transition: border-color 0.3s, color 0.3s;
        }

        .tab-item.active {
            border-bottom: 3px solid #007bff;
            color: #007bff;
        }

        .tab-item:not(.active):hover {
            color: #007bff;
        }

        .form-label {
            font-weight: bold;
            margin-bottom: 5px;
            font-size: 16px;
        }

        .form-select {
            border-radius: 0.375rem;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
            transition: box-shadow 0.3s ease, border-color 0.3s ease;
        }

        .form-select:hover,
        .form-select:focus {
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        }

        .status-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
        }

        /* Nội dung modal */
        .modal-content {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            width: 300px;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .close {
            font-size: 1.5rem;
            cursor: pointer;
        }

        .modal-footer {
            display: flex;
            justify-content: space-between;
        }

        .form-group {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .form-group label {
            flex: 1;
            margin-right: 10px;
        }

        .form-group input {
            flex: 2;
        }

        select {
            flex: 2;
        }

        .form-select.form-select-lg {
            height: 33px;
            border-color: lightgray;
            border-radius: 5px;
        }

        .input_style {
            height: 35px;
            border-radius: 5px;
        }
    </style>
</head>

<body>
    <div class="container mt-4">
        <!-- Header -->
        <div class="d-flex align-items-center justify-content-between mb-4 position-relative" style="height: 100px;">
            <!-- Back button -->
            <button class="btn btn-light border" style="background-color: #f4f6f6; font-weight: 600;"
                onclick="goBack()">
                <i class="fa fa-chevron-left" aria-hidden="true"></i> Quay lại
            </button>

            <!-- Centered title -->
            <div class="mx-auto text-center">
                <h1 class="text-primary mb-1">Quản lý tiền thuê phòng</h1>
                <p class="text-muted mb-0">Quản lý tiền thuê hàng tháng.</p>
            </div>

            <!-- Add button -->
            <button class="btn btn-primary border" style="font-weight: 600;" onclick="openInvoiceDialog()">
                Tạo hóa đơn
            </button>
        </div>

        <div class="border-top column">
            <h5 class="text-primary mb-0 mt-3">Tòa nhà</h5>
            <div id="buildings-list" class="row mt-4">
                <!-- Danh sách tòa nhà sẽ được hiển thị ở đây -->
            </div>

            <!-- Chọn tháng năm -->
            <div class="">
                <div class="row mb-4 mt-4 d-flex align-items-center">
                    <!-- Dropdown chọn tháng năm -->
                    <div class="col-md-4">
                        <label for="month-year" class="form-label">Lọc theo tháng</label>
                        <select class="form-select form-select-lg mb-3 px-2" id="month-year"
                            aria-label="Chọn tháng và năm">
                            <option selected value="">-- Chọn tháng --</option>
                        </select>
                    </div>

                    <!-- Lọc theo năm -->
                    <div class="col-md-4">
                        <label for="year" class="form-label">Lọc theo năm khác</label>
                        <select class="form-select form-select-lg mb-3 px-2" id="year" aria-label="Chọn năm">
                            <option selected value="">-- Chọn năm --</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Tab menu chọn đã thanh toán hay chưa thanh toán ở đây  -->
            <div class="tab-menu row mt-3">
                <div id="paid-tab" class="tab-item active" style="font-size: 20px" onclick="selectTab('paid')">Đã thanh
                    toán</div>
                <div id="unpaid-tab" class="tab-item" style="font-size: 20px" onclick="selectTab('unpaid')">Chưa thanh
                    toán</div>
            </div>

            <div id="invoices-container" class="mt-3">
                <!-- Danh sách hóa đơn sẽ được hiển thị ở đây -->
            </div>
        </div>
    </div>

    <!-- Dialog Add Invoice -->
    <div id="invoiceDialog"
        style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); justify-content: center; align-items: center;">
        <div
            style="background: white; padding: 20px; border-radius: 8px; width: 75%; max-height: 80%; overflow-y: auto;">
            <h3 id="invoiceFormTitle" style="margin-bottom: 20px;">Tạo hóa đơn</h3>

            <!-- Select Building -->
            <div class="row align-items-center mb-2">
                <!-- Select Building -->
                <div class="col-md-4">
                    <label style="width: 150px;" for="buildingSelect" class="form-label">Tòa nhà:</label>
                    <select class="form-select form-select-lg mb-3 px-2" id="buildingSelect" onchange="onBuildingChange()">
                        <!-- Options will be dynamically populated -->
                    </select>
                </div>

                <!-- Select Room -->
                <div class="col-md-4">
                    <label style="width: 80px;"  for="roomSelect" class="form-label">Phòng:</label>
                    <select class="form-select form-select-lg mb-3 px-2" id="roomSelect">
                        <!-- Options will be dynamically populated -->
                    </select>
                </div>

                <!-- Select Month -->
                <div class="col-md-4">
                    <label style="width: 80px;" for="monthSelect" class="form-label">Tháng:</label>
                    <select class="form-select form-select-lg mb-3 px-2" id="monthSelect">
                        <!-- Các tháng từ 1-12 sẽ được tạo động -->
                    </select>
                </div>
            </div>


            <!-- Input Rows -->
            <div style="margin-top: 10px;">
                <label style="width: 150px;">Số điện:</label>
                <input class="input_style border px-2" style="margin-right: 50px;" type="number" id="electricUnits"
                    placeholder="Nhập số điện" oninput="calculateTotal()">
                <label style="width: 150px;">Giá điện (VNĐ/số):</label>
                <input class="input_style border px-2" type="number" id="electricPrice" placeholder="Nhập giá điện"
                    oninput="calculateTotal()" readonly>
            </div>

            <div style="margin-top: 10px;">
                <label style="width: 150px;">Số nước:</label>
                <input class="input_style border px-2" style="margin-right: 50px;" type="number" id="waterUnits"
                    placeholder="Nhập số nước" oninput="calculateTotal()">
                <label style="width: 150px;">Giá nước (VNĐ/số):</label>
                <input class="input_style border px-2" type="number" id="waterPrice" placeholder="Nhập giá nước"
                    oninput="calculateTotal()" readonly>
            </div>
            <!-- fee other -->
            <div style="margin-top: 10px;">
                <label style="width: 150px;">Phí Internet:</label>
                <input class="input_style border px-2" style="margin-right: 50px;" type="number" id="wifiPrice"
                    placeholder="Nhập phí wifi" oninput="calculateTotal()" readonly>
                <label style="width: 150px;">Phí dịch vụ chung:</label>
                <input class="input_style border px-2" type="number" id="otherPrice"
                    placeholder="Nhập giá dịch vụ chung" oninput="calculateTotal()" readonly>
            </div>

            <div style="margin-top: 10px; display: none" id="service-fee-other">
                <!-- danh sách phí dv khác -->
            </div>


            <div style="margin-top: 10px;">
                <label style="width: 150px;">Trạng thái thanh toán:</label>
                <div style="display: inline-block;">
                    <label>
                        <input type="radio" name="paymentStatus" value="unpaid" checked> Chưa thanh toán
                    </label>
                    <label style="margin-left: 20px;">
                        <input type="radio" name="paymentStatus" value="paid"> Đã thanh toán
                    </label>
                </div>
            </div>

            <!-- Room Price -->
            <div style="margin-top: 10px;">
                <label style="width: 150px;">Giá phòng (VNĐ):</label>
                <input class="input_style border px-2" type="number" id="roomPrice" readonly>
            </div>
            <input type="hidden" id="invoiceId">
            <!-- Total -->
            <div style="margin-top: 10px; font-weight: bold;">
                Tổng tiền (VNĐ): <span id="totalAmount">0</span>
            </div>

            <!-- Actions -->
            <div style="margin-top: 20px; display: flex; justify-content: space-between;">
                <button class="btn btn-secondary" onclick="closeInvoiceDialog()">Đóng</button>
                <button id="invoiceFormButton" class="btn btn-primary" onclick="createInvoice()">Tạo</button>
            </div>
        </div>
    </div>
</body>

<script>

    function goBack() { window.history.back(); }
    // 
    let landlord_id = localStorage.getItem('user_id');
    // console.log("userId :", userId)
    let buildings = [];
    let isMonthLoad = true;
    let selectedBuildingId;
    let buildingIdForm;
    let currentDate = new Date();
    let selectedYear = currentDate.getFullYear();
    let selectedMonth = currentDate.getMonth() + 1;
    let selectPaymentStatus = 'paid';

    // ============ Building ===========
    const getListBuildings = async () => {
        try {
            const res = await fetch(`http://localhost:3000/api/buildings_mgr/${landlord_id}`);
            const data = await res.json();
            if (res.ok) {
                buildings = data.data;

                console.log("buildings : ", buildings)

                displayBuildings(); // Hiển thị danh sách tòa nhà khi nhận được dữ liệu
                // Mặc định chọn tòa nhà đầu tiên
                if (buildings.length > 0) {
                    selectBuilding(buildings[0]._id);
                    selectTab('paid');
                }
            } else {
                Toastify({
                    text: "Failed to load buildings",
                    style: {
                        background: "linear-gradient(to right, #ff5f6d, #ffc371)"
                    }
                }).showToast();
            }
        } catch (error) {
            console.error("Error fetching buildings:", error);
        }
    }
    getListBuildings()


    // Hàm hiển thị danh sách tòa nhà
    const displayBuildings = () => {
        const buildingsListDiv = document.getElementById('buildings-list');
        buildingsListDiv.innerHTML = ''; // Xóa nội dung cũ trước khi thêm mới

        buildings.forEach(building => {
            const buildingRow = document.createElement('div');
            buildingRow.classList.add('col-md-4', 'mb-4', 'building-item'); // Cột kiểu bootstrap

            buildingRow.innerHTML = `
                <div class="card ${selectedBuildingId === building._id ? 'selected' : ''}" data-id="${building._id}" style="font-size: 14px; padding: 10px;">
                    <div class="card-body" style="padding: 1px;">
                        <h6 class="card-title" style="font-size: 16px;">${building.nameBuilding}</h6>
                         <span style="font-size: small; color: #777;">Địa chỉ: <span style="font-size: small; color: #363636;">${building.address ?? 'N/A'}</span> </span>
                    </div>
                </div>
            `;

            // Thêm sự kiện click để chọn tòa nhà
            buildingRow.addEventListener('click', () => selectBuilding(building._id));

            buildingsListDiv.appendChild(buildingRow); // Thêm phần tử vào danh sách
        });
    }

    // Hàm để chọn tòa nhà
    const selectBuilding = (buildingId) => {
        selectedBuildingId = buildingId;
        console.log("Selected Building ID: ", selectedBuildingId);

        // Cập nhật lại giao diện để đánh dấu item đã chọn
        const buildingItems = document.querySelectorAll('.building-item .card');
        buildingItems.forEach(item => {
            item.classList.remove('selected'); // Xóa class 'selected' khỏi tất cả các item
        });

        const selectedItem = document.querySelector(`.building-item .card[data-id="${buildingId}"]`);
        if (selectedItem) {
            selectedItem.classList.add('selected'); // Thêm class 'selected' vào item được chọn
        }

        if (isMonthLoad) {
            getInvoices(buildingId, selectedMonth, selectedYear, selectPaymentStatus);
        } else {
            getInvoicesYear(selectedYear, selectPaymentStatus)
        }
    }


    // ============ Tabs ===============
    function selectTab(tab) {
        const tabs = document.querySelectorAll('.tab-item');
        tabs.forEach(tabItem => tabItem.classList.remove('active'));  // Gỡ bỏ active khỏi tất cả các tab

        if (tab === 'paid') {
            document.getElementById('paid-tab').classList.add('active');  // Đánh dấu tab đã thanh toán là active
            selectPaymentStatus = 'paid';  // Cập nhật trạng thái thanh toán
        } else if (tab === 'unpaid') {
            document.getElementById('unpaid-tab').classList.add('active');  // Đánh dấu tab chưa thanh toán là active
            selectPaymentStatus = 'unpaid';  // Cập nhật trạng thái thanh toán
        }

        // Gọi lại hàm getInvoices để lấy hóa đơn của tab đã chọn
        if (isMonthLoad) {
            getInvoices(selectedBuildingId, selectedMonth, selectedYear, selectPaymentStatus);
        } else {
            getInvoicesYear(selectedYear, selectPaymentStatus)
        }
    }
    selectTab('paid');

    // ============ Invoice ==============
    async function getInvoices(buildingId, selectedMonth, selectedYear, selectPaymentStatus) {
        try {
            const queryParams = new URLSearchParams({
                month: selectedMonth,
                year: selectedYear,
                paymentStatus: selectPaymentStatus
            });
            const res = await fetch(`http://localhost:3000/api/buildings_mgr/${selectedBuildingId}/invoices?${queryParams.toString()}`);
            const data = await res.json();

            if (res.ok) {
                displayInvoices(selectPaymentStatus === 'paid' ? 'Đã thanh toán' : 'Chưa thanh toán',
                    selectPaymentStatus === 'paid' ? data.paidInvoices : data.unpaidInvoices);
            } else {
                console.error('Không thể lấy dữ liệu hóa đơn:', data.message);
            }
        } catch (error) {
            console.error('Lỗi khi lấy hóa đơn:', error);
        }
    }

    async function getInvoicesYear(selectedYear, selectPaymentStatus) {
        try {
            const queryParams = new URLSearchParams({
                year: selectedYear,
                paymentStatus: selectPaymentStatus
            });
            const res = await fetch(`http://localhost:3000/api/buildings_mgr/${selectedBuildingId}/invoices/year?${queryParams.toString()}`);
            const data = await res.json();

            if (res.ok) {
                displayInvoices(selectPaymentStatus === 'paid' ? 'Đã thanh toán' : 'Chưa thanh toán',
                    selectPaymentStatus === 'paid' ? data.paidInvoices : data.unpaidInvoices);
            } else {
                console.error('Không thể lấy dữ liệu hóa đơn:', data.message);
            }
        } catch (error) {
            console.error('Lỗi khi lấy hóa đơn:', error);
        }
    }

    function displayInvoices(title, invoices) {
        const container = document.getElementById('invoices-container');
        container.innerHTML = ''; // Xóa hết nội dung cũ trong container

        let html = `<h3></h3>`; // Cập nhật tiêu đề

        if (invoices.length === 0) {
            html += `<p>Không có hóa đơn.</p>`;
        } else {
            html += `<div class="row">`; // Sử dụng lớp Bootstrap 'row' để tạo hàng
            invoices.forEach(invoice => {
                let paymentStatusClass = '';
                let paymentStatusText = '';

                if (invoice.payment_status === 'paid') {
                    paymentStatusClass = 'text-success';  // Màu xanh lá cây
                    paymentStatusText = 'Đã thanh toán';
                } else {
                    paymentStatusClass = 'text-danger';  // Màu đỏ (hoặc có thể dùng 'text-warning' cho vàng)
                    paymentStatusText = 'Chưa thanh toán';
                }
                html += `<div class="col-md-4 mb-4">
                            <div class="border p-3 rounded shadow-sm d-flex justify-content-between align-items-center">

                                <div class="left-side">
                                    <strong>Phòng: ${invoice.room_id.room_name}</strong><br>
                                    <div class="mb-0 mt-1" style="font-size: 14px;">
                                        <span style="font-size: small; color: #777; padding-right:9px;">Tháng:</span>
                                        <span>${new Date(invoice.created_at).toLocaleString('vi-VN', { month: 'long' })}</span>
                                    </div>
                                    <div class="mb-0 mt-1" style="font-size: 14px;">
                                        <span style="font-size: small; color: #777;padding-right:5px;">Thành tiền:</span>
                                        <span>${invoice.amount.toLocaleString('vi-VN')} VND</span><br>
                                    </div>
                                    <div class="mb-0 mt-1" style="font-size: 14px;">
                                        <span style="font-size: small; color: #777; padding-right:9px;">Trạng thái:</span>
                                        <span class="${paymentStatusClass}"> ${paymentStatusText}</span>
                                    </div>
                                </div>

                                <div class="d-flex flex-column gap-2">
                                    <button class="btn btn-primary btn-sm" onclick="openUpdateInvoiceForm('${invoice._id}')">Cập nhật</button>
                                    <button class="btn btn-danger btn-sm mt-2" onclick="deleteInvoice('${invoice._id}')">Xóa</button>
                                </div>
                            </div>
                        </div>`;
            });
            html += `</div>`;
        }
        container.innerHTML = html;  // Cập nhật lại nội dung của container
    }

    getInvoices(selectedBuildingId, selectedMonth, selectedYear, selectPaymentStatus)

    // =========== Filter ==========

    document.addEventListener('DOMContentLoaded', function () {
        let label = document.getElementById('month-year-label');
        label.textContent = `Lọc theo tháng (${selectedYear})`;
    });

    // Tạo dropdown tháng
    const monthYearDropdown = document.getElementById('month-year');
    for (let month = 1; month <= 12; month++) {
        const monthOption = document.createElement('option');
        const formattedMonth = String(month).padStart(2, '0');  // Đảm bảo là 2 chữ số
        monthOption.value = `${formattedMonth}/${selectedYear}`;
        monthOption.textContent = `${formattedMonth}/${selectedYear}`;

        // Chọn tháng hiện tại mặc định
        if (month === selectedMonth) {
            monthOption.selected = true;
        }

        monthYearDropdown.appendChild(monthOption);
    }

    // Tạo dropdown năm
    const yearDropdown = document.getElementById('year');
    const yearsToDisplay = 5; // Hiển thị 5 năm gần nhất
    for (let i = 0; i < yearsToDisplay; i++) {
        const yearOption = document.createElement('option');
        const year = selectedYear - i;
        yearOption.value = year;
        yearOption.textContent = year;
        yearDropdown.appendChild(yearOption);
    }

    // Hàm xử lý sự kiện chọn tháng
    monthYearDropdown.addEventListener("change", function () {
        if (monthYearDropdown.value !== "") {
            isMonthLoad = true;
            yearDropdown.value = "";
            selectedMonth = parseInt(monthYearDropdown.value);
            selectedYear = currentDate.getFullYear();
        }
        getInvoices(selectedBuildingId, selectedMonth, selectedYear, selectPaymentStatus)
    });

    // Hàm xử lý sự kiện chọn năm
    yearDropdown.addEventListener("change", function () {
        if (yearDropdown.value !== "") {
            isMonthLoad = false;
            monthYearDropdown.value = "";
            selectedYear = parseInt(yearDropdown.value);
            selectedMonth = currentDate.getMonth() + 1;
        }
        getInvoicesYear(selectedYear, selectPaymentStatus)
    });

    // =================== CRUD =========================

    let rooms = [];
    let staffId;
    // Lấy danh sách phòng của tòa nhà
    const getRooms = async (building_id) => {
        try {
            const res = await fetch(`http://localhost:3000/api/buildings_mgr_rooms/${building_id}`);
            const data = await res.json();
            if (res.ok) {
                rooms = data.data;  // Lưu lại danh sách phòng
                console.log("rooms : ", rooms);
            } else {
                Toastify({
                    text: "Failed to load rooms",
                    style: {
                        background: "linear-gradient(to right, #ff5f6d, #ffc371)"
                    }
                }).showToast();
            }
        } catch (error) {
            console.error("Error fetching rooms:", error);
        }
    }

    // Mở dialog thêm hóa đơn
    async function openInvoiceDialog() {
        console.log("open dialog add");
        populateBuildings();
        populateMonthDropdown();
        // setDataServiceFee()
        document.getElementById('invoiceDialog').style.display = 'flex';
    }

    async function setDataServiceFee() {
        console.log("load load");
        try {
            // Gọi API
            const response = await axios.get(`/api/building/${buildingIdForm}/service-fees`);

            // Dữ liệu JSON đã được parse tự động bởi axios
            const service_fee = response.data;

            // Kiểm tra nếu dữ liệu là mảng
            if (Array.isArray(service_fee)) {
                const electricService = service_fee.find(service => service.name === "Điện");
                electricService.innerHTML = ""
                document.getElementById('electricPrice').value = electricService ? electricService.price : 0;

                const waterService = service_fee.find(service => service.name === "Nước");
                waterService.innerHTML = ""
                document.getElementById('waterPrice').value = waterService ? waterService.price : 0;

                const wifiPrice = service_fee.find(s => s.name === "Wifi");
                document.getElementById("wifiPrice").value = wifiPrice ? wifiPrice.price : 0

                const otherPrice = service_fee.find(s => s.name === "Dịch vụ chung")
                document.getElementById("otherPrice").value = otherPrice ? otherPrice.price : 0



                // Lọc các dịch vụ khác
                // const otherServices = service_fee.filter(service => service.name !== "Điện" && service.name !== "Nước");

                // // Xóa nội dung cũ của div "service-fee-other"
                // const serviceFeeContainer = document.getElementById('service-fee-other');
                // serviceFeeContainer.innerHTML = ""; // Xóa nội dung cũ

                // // Thêm các dịch vụ khác vào div
                // otherServices.forEach(service => {
                //     const serviceDiv = document.createElement('div');
                //     serviceDiv.style.marginTop = "10px";

                //     // Label cho tên dịch vụ
                //     const serviceLabel = document.createElement('label');
                //     serviceLabel.style.width = "155px";
                //     serviceLabel.textContent = `${service.name}:`;
                //     serviceDiv.appendChild(serviceLabel);

                //     // Input cho giá dịch vụ
                //     const serviceInput = document.createElement('input');
                //     serviceInput.type = "number";
                //     serviceInput.value = service.price;
                //     serviceInput.className = "input_style border px-2";
                //     serviceInput.style.marginRight = "50px";
                //     serviceInput.readOnly = true; // Giá chỉ đọc
                //     serviceDiv.appendChild(serviceInput);

                //     // Thêm div con vào container
                //     serviceFeeContainer.appendChild(serviceDiv);
                // });

                // Hiển thị div nếu có dịch vụ khác
                serviceFeeContainer.style.display = otherServices.length > 0 ? 'block' : 'none';
            } else {
                console.error('Dữ liệu không phải là mảng:', service_fee);
            }
        } catch (error) {
            console.error('Lỗi khi lấy phí dịch vụ của tòa nhà:', error);
        }
    }


    // Đóng dialog
    function closeInvoiceDialog() {
        document.getElementById('invoiceId').value = "";
        document.getElementById('buildingSelect').value = "";
        document.getElementById('roomSelect').value = "";
        document.getElementById('monthSelect').value = "";
        document.getElementById('buildingSelect').value = "";
        document.getElementById('roomSelect').value = "";
        document.getElementById('electricUnits').value = "";
        document.getElementById('electricPrice').value = "";
        document.getElementById('waterUnits').value = "";
        document.getElementById('waterPrice').value = "";
        document.getElementById('roomPrice').value = "";

        document.getElementById('invoiceFormTitle').innerText = 'Tạo hóa đơn';
        document.getElementById('invoiceFormButton').innerText = 'Tạo';

        const paymentStatusPending = document.querySelector('input[name="paymentStatus"][value="unpaid"]');
        if (paymentStatusPending) {
            paymentStatusPending.checked = true;
        }
        document.getElementById('invoiceDialog').style.display = 'none';
    }

    // DropDown tòa nhà
    function populateBuildings() {
        const buildingSelect = document.getElementById('buildingSelect');
        buildingSelect.innerHTML = buildings.map(building => `<option value="${building._id}">${building.nameBuilding}</option>`).join('');
        onBuildingChange();  // Gọi onBuildingChange để load phòng cho tòa nhà đầu tiên
    }

    // Xử lý sự kiện thay đổi tòa nhà
    async function onBuildingChange() {
        const buildingId = document.getElementById('buildingSelect').value;
        const selectedBuilding = buildings.find(building => building._id === buildingId);
        buildingIdForm = buildingId;
        if (selectedBuilding) {
            staffId = selectedBuilding.manager_id; // Gán manager_id của tòa nhà cho staffId
            console.log("Staff ID set to:", staffId);
        }
        setDataServiceFee()
        await getRooms(buildingId);  // Lấy danh sách phòng từ API

        const roomSelect = document.getElementById('roomSelect');
        roomSelect.innerHTML = rooms.map(room => `<option value="${room._id}" data-price="${room.price}">${room.room_name}</option>`).join('');

        onRoomChange();
    }

    // Xử lý sự kiện thay đổi phòng
    function onRoomChange() {
        const roomSelect = document.getElementById('roomSelect');
        const selectedRoomPrice = roomSelect.options[roomSelect.selectedIndex].dataset.price;
        document.getElementById('roomPrice').value = selectedRoomPrice;
        
        calculateTotal();  // Tính lại tổng tiền
    }

    // Tính tổng số tiền
    function calculateTotal() {
        const electricUnits = Number(document.getElementById('electricUnits').value) || 0;
        const electricPrice = Number(document.getElementById('electricPrice').value) || 0;
        const waterUnits = Number(document.getElementById('waterUnits').value) || 0;
        const waterPrice = Number(document.getElementById('waterPrice').value) || 0;
        const roomPrice = Number(document.getElementById('roomPrice').value) || 0;
        const wifiPrice = Number(document.getElementById('wifiPrice').value) || 0;
        const otherPrice = Number(document.getElementById('otherPrice').value) || 0;

        console.log(waterPrice, otherPrice)

        let total = (electricUnits * electricPrice) + (waterUnits * waterPrice) + wifiPrice + otherPrice + roomPrice;

        // Hiển thị tổng tiền
        document.getElementById('totalAmount').textContent = total.toLocaleString('vi-VN');
    }

    // Tạo hóa đơn
    async function createInvoice() {
        if (!validateInputs()) {
            return;
        }
        const invoiceId = document.getElementById('invoiceId').value;
        const buildingId = document.getElementById('buildingSelect').value;
        const roomId = document.getElementById('roomSelect').value;
        const electricUnits = Number(document.getElementById('electricUnits').value) || 0;
        const electricPrice = Number(document.getElementById('electricPrice').value) || 0;
        const waterUnits = Number(document.getElementById('waterUnits').value) || 0;
        const waterPrice = Number(document.getElementById('waterPrice').value) || 0;
        const paymentStatus = document.querySelector('input[name="paymentStatus"]:checked').value;
        const roomPrice = Number(document.getElementById('roomPrice').value) || 0;
        const wifiPrice = Number(document.getElementById('wifiPrice').value) || 0;
        const otherPrice = Number(document.getElementById('otherPrice').value) || 0;
        const totalAmount = (electricUnits * electricPrice) + (waterUnits * waterPrice) + wifiPrice + otherPrice + roomPrice;

        const description = [
            {
                service_name: "Điện",
                quantity: electricUnits,
                price_per_unit: electricPrice,
                total: electricUnits * electricPrice
            },
            {
                service_name: "Nước",
                quantity: waterUnits,
                price_per_unit: waterPrice,
                total: waterUnits * waterPrice
            },
            {
                service_name: "Thuê phòng",
                quantity: 1, // Thuê phòng là 1 đơn vị
                price_per_unit: roomPrice,
                total: roomPrice
            },
            {
                service_name: "Wifi",
                quantity: 1,
                price_per_unit: wifiPrice,
                total: wifiPrice
            },
            {
                service_name: "Other",
                quantity: 1,
                price_per_unit: otherPrice,
                total: otherPrice
            }
        ];

        const currentDate = new Date();
        const dueDate = new Date(currentDate);
        dueDate.setDate(currentDate.getDate() + 5);

        // Lấy thông tin tháng và tạo ngày
        const selectedMonth = document.getElementById('monthSelect').value;
        const today = new Date();
        const currentMonth = today.getMonth() + 1;
        const year = today.getFullYear(); // Năm hiện tại

        const date = selectedMonth == currentMonth
            ? new Date(year, selectedMonth - 1, today.getDate()) // Giữ nguyên ngày nếu là tháng hiện tại
            : new Date(year, selectedMonth - 1, 10);
        // date.setHours(0, 0, 0, 0);

        // console.log({ buildingId, roomId, electricUnits, electricPrice, waterUnits, waterPrice, roomPrice, totalAmount });

        const invoice = {
            user_id: staffId,
            building_id: buildingId,
            room_id: roomId,
            description,
            describe: "Hóa đơn thanh toán phòng",
            type_invoice: "rent",
            amount: totalAmount,
            transaction_type: "income",
            due_date: dueDate.toISOString(),
            payment_status: paymentStatus,
            created_at: date.toISOString()
        };

        try {
            const res = invoiceId
                ?
                await fetch(`http://localhost:3000/api/invoice_mgr/${invoiceId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(invoice),
                })
                : await fetch("http://localhost:3000/api/invoice_mgr", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(invoice)
                });

            if (res.ok) {
                document.getElementById('buildingSelect').value = "";
                document.getElementById('roomSelect').value = "";
                document.getElementById('monthSelect').value = "";
                document.getElementById('electricUnits').value = "";
                document.getElementById('electricPrice').value = "";
                document.getElementById('waterUnits').value = "";
                document.getElementById('waterPrice').value = "";
                document.getElementById('roomPrice').value = "";
                document.getElementById('wifiPrice').value = "";
                document.getElementById('otherPrice').value = "";
                document.getElementById('totalAmount').textContent = "0";
                if (isMonthLoad) {
                    getInvoices(buildingId, selectedMonth, selectedYear, selectPaymentStatus);
                } else {
                    getInvoicesYear(selectedYear, selectPaymentStatus)
                }
                if (invoiceId) {
                    closeInvoiceDialog();
                }
                Toastify({
                    text: "Thành công",
                    style: { background: "linear-gradient(to right, #007bff, #00b8d8)" }
                }).showToast();
            } else {
                Toastify({
                    text: "Thất bại",
                    style: { background: "linear-gradient(to right, #ff5f6d, #ffc371)" }
                }).showToast();
            }
        } catch (error) {
            Toastify({
                text: "Lỗi, không thành công",
                style: { background: "linear-gradient(to right, #ff5f6d, #ffc371)" }
            }).showToast();
            console.error("Lỗi, không thành công:", error);
        }
        // closeInvoiceDialog();
    }

    async function openUpdateInvoiceForm(invoiceId) {
        try {
            populateBuildings();
            populateMonthDropdown();

            // const service_fee = get

            const response = await fetch(`http://localhost:3000/api/invoice_mgr/${invoiceId}`);
            if (!response.ok) {
                alert("Không tìm thấy hóa đơn!");
                return;
            }

            const data = await response.json();
            const invoice = data.data

            document.getElementById('invoiceFormTitle').innerText = 'Cập nhật hóa đơn';
            document.getElementById('invoiceFormButton').innerText = 'Cập nhật';

            // Tìm giá trị cho các dịch vụ: điện, nước, phòng
            let electricUnits = 0, electricPrice = 0, waterUnits = 0, waterPrice = 0, roomPrice = 0, wifiPrice = 0; otherPrice = 0;
            invoice.description.forEach(item => {
                if (item.service_name === "Điện") {
                    electricUnits = item.quantity;
                    electricPrice = item.price_per_unit;
                }
                if (item.service_name === "Nước") {
                    waterUnits = item.quantity;
                    waterPrice = item.price_per_unit;
                }
                if (item.service_name === "Thuê phòng") {
                    roomPrice = item.price_per_unit;
                }
                if (item.service_name === "Wifi") {
                    wifiPrice = item.price_per_unit
                }
                if (item.service_name === "Other") {
                    otherPrice = item.price_per_unit
                }
            });

            // Gán giá trị cho các input
            document.getElementById('buildingSelect').value = invoice.building_id || '';
            await onBuildingChange();
            document.getElementById('roomSelect').value = invoice.room_id || '';
            onRoomChange();
            document.getElementById('electricUnits').value = electricUnits || '';
            document.getElementById('electricPrice').value = electricPrice || '';
            document.getElementById('waterUnits').value = waterUnits || '';
            document.getElementById('waterPrice').value = waterPrice || '';
            document.getElementById('roomPrice').value = roomPrice || '';
            document.getElementById('wifiPrice').value = wifiPrice || 0;
            document.getElementById('otherPrice').value = otherPrice || 0;
            document.querySelector(`input[name="paymentStatus"][value="${invoice.payment_status}"]`).checked = true;
            const dueDate = new Date(invoice.created_at);
            const month = dueDate.getMonth() + 1;
            document.getElementById('monthSelect').value = month;
            // Tính toán tổng tiền
            calculateTotal();
            // Hiển thị form
            document.getElementById('invoiceDialog').style.display = 'flex';
            // Lưu ID hóa đơn để cập nhật
            document.getElementById('invoiceId').value = invoiceId;

            console.log("month in update :", month)
        } catch (error) {
            console.error("Lỗi khi mở form cập nhật:", error);
        }
    }

    async function deleteInvoice(invoiceId) {
        if (confirm("Bạn có chắc chắn muốn xóa hóa đơn này?")) {
            try {
                const response = await fetch(`http://localhost:3000/api/invoice_mgr/${invoiceId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();

                if (response.ok) {
                    if (isMonthLoad) {
                        getInvoices(selectedBuildingId, selectedMonth, selectedYear, selectPaymentStatus);
                    } else {
                        getInvoicesYear(selectedYear, selectPaymentStatus)
                    }
                    Toastify({
                        text: "Xóa thành công",
                        style: { background: "linear-gradient(to right, #007bff, #00b8d8)" }
                    }).showToast();
                    // document.getElementById(`invoice-${invoiceId}`).remove();
                } else {
                    Toastify({
                        text: "Xóa thất bại",
                        style: { background: "linear-gradient(to right, #ff5f6d, #ffc371)" }
                    }).showToast();
                }
            } catch (error) {
                console.error("Error deleting invoice:", error);
            }
        }
    }

    function validateInputs() {
        const buildingId = document.getElementById('buildingSelect').value;
        const roomId = document.getElementById('roomSelect').value;
        const month = document.getElementById('monthSelect').value;
        const electricUnits = Number(document.getElementById('electricUnits').value) || 0;
        const electricPrice = Number(document.getElementById('electricPrice').value) || 0;
        const waterUnits = Number(document.getElementById('waterUnits').value) || 0;
        const waterPrice = Number(document.getElementById('waterPrice').value) || 0;
        const paymentStatus = document.querySelector('input[name="paymentStatus"]:checked').value;
        const roomPrice = Number(document.getElementById('roomPrice').value) || 0;
        const wifiPrice = Number(document.getElementById('wifiPrice').value) || 0;
        const otherPrice = Number(document.getElementById('otherPrice').value) || 0;

        if (!buildingId) {
            alert("Vui lòng chọn tòa nhà.");
            return false;
        }

        if (!roomId) {
            alert("Vui lòng chọn phòng.");
            return false;
        }

        if (!month) {
            alert("Vui lòng chọn tháng.");
            return false;
        }

        if (electricUnits < 1 || isNaN(electricUnits)) {
            alert("Số lượng điện phải là một số hợp lệ.");
            return false;
        }

        if (electricPrice < 1 || isNaN(electricPrice)) {
            alert("Đơn giá điện phải là một số hợp lệ.");
            return false;
        }

        if (waterUnits < 1 || isNaN(waterUnits)) {
            alert("Số lượng nước phải là một số hợp lệ.");
            return false;
        }

        if (waterPrice < 1 || isNaN(waterPrice)) {
            alert("Đơn giá nước phải là một số hợp lệ.");
            return false;
        }
        if (wifiPrice < 1 || isNaN(waterPrice)) {
            alert("Phí Internet phải là một số hợp lệ.");
            return false;
        }
        if (otherPrice < 1 || isNaN(waterPrice)) {
            alert("Phí dịch vụ chung phải là một số hợp lệ.");
            return false;
        }
        if (paymentStatus === "") {
            alert("Vui lòng chọn trạng thái thanh toán");
            return false;
        }

        return true;
    }

    function populateMonthDropdown() {
        const monthSelect = document.getElementById('monthSelect');
        const currentMonth = new Date().getMonth() + 1; // Lấy tháng hiện tại (0-11 nên cần +1)
        for (let i = 1; i <= 12; i++) {
            const option = document.createElement('option');
            option.value = i;
            option.textContent = `Tháng ${i}`;
            if (i === currentMonth) {
                option.selected = true; // Chọn tháng hiện tại
            }
            monthSelect.appendChild(option);
        }
    }

    // Gọi hàm khi trang tải
    window.onload = function () {
        populateMonthDropdown();
    };
</script>

</html>