<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.3/css/lightbox.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/css/bootstrap-datepicker.min.css">

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.3/js/lightbox.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/js/bootstrap-datepicker.min.js"></script>

    <title>Statistic</title>
    <style>
        .selected {
            border: 2px solid #007bff;
            background-color: #f0f8ff;
        }

        .form-select.form-select-lg {
            height: 33px;
            border-color: lightgray;
            border-radius: 5px;
            margin-top: 15px;
        }

        .form-label {
            font-weight: bold;
            margin-bottom: 5px;
            font-size: 14px;
        }

        .expense-details ul {
            padding-left: 20px;
            margin-top: 10px;
            list-style-type: none;
            /* Xóa bullet point */
        }

        .expense-details li {
            margin-bottom: 10px;
            /* Khoảng cách giữa các mục */
            font-size: 16px;
            /* Cỡ chữ */
            color: #333;
            /* Màu chữ mặc định */
            text-align: left;
            /* Căn trái nội dung */
        }

        .expense-details .title {
            font-size: 14px;
            /* Cỡ chữ nhỏ hơn */
            color: gray;
            /* Màu chữ xám */
        }

        .expense-details .amount {
            font-size: 16px;
            /* Cỡ chữ lớn hơn */
            font-weight: bold;
            /* Chữ đậm */
            color: #000;
            /* Màu chữ đen */
        }
    </style>
</head>

<body>
    <div class="container mt-4">
        <!-- Header -->
        <div class="d-flex align-items-center justify-content-between mb-4 position-relative" style="height: 100px;">
            <!-- Centered title -->
            <div class="mx-auto text-center">
                <h1 class="text-primary mb-1">Thống kê</h1>
                <p class="text-muted mb-0">Doanh thu - Chi phí - Lợi nhuận.</p>
            </div>
        </div>

        <div class="border-top column">
            <h5 class="text-primary mb-0 mt-2">Tòa nhà</h5>
            <div id="buildings-list" class="row mt-4">
                <!-- Danh sách tòa nhà sẽ được hiển thị ở đây -->
            </div>
        </div>

        <div class="">
            <div class="row mb-3 mt-1 d-flex align-items-center">
                <!-- Dropdown chọn trạng thái -->
                <div class="col-md-2">
                    <select class="form-select form-select-lg mb-3" id="month-year" aria-label="Chọn tháng và năm">
                        <option selected value="">-- Chọn tháng --</option>
                    </select>
                </div>

                <!-- Lọc theo năm -->
                <div class="col-md-2">
                    <input type="text" id="yearPicker" class="form-control form-select form-select-lg mb-3"
                        style="background-color: #fff;" placeholder="-- Chọn năm --" readonly>
                </div>
            </div>
        </div>

        <div id="statistics-section" class="mt-3">

        </div>

    </div>
</body>
<script>
    let chutoaID = localStorage.getItem('user_id');
    let selectedBuildingId;
    let currentDate = new Date();
    let selectedMonth = currentDate.getMonth() + 1;;
    let selectedYear = currentDate.getFullYear();
    let isMonthLoad = true

    // ============ Building ===========
    const getListBuildings = async () => {
        try {
            const res = await fetch(`http://localhost:3000/api/buildings_mgr/${chutoaID}`);
            const data = await res.json();
            if (res.ok) {
                buildings = data.data;
                console.log("buildings : ", buildings)
                displayBuildings(); // Hiển thị danh sách tòa nhà khi nhận được dữ liệu
                // Mặc định chọn tòa nhà đầu tiên
                if (buildings.length > 0) {
                    selectBuilding(buildings[0]._id);
                }
            } else {
                Toastify({
                    text: "Failed to load buildings",
                    style: {
                        background: "linear-gradient(to right, #ff5f6d, #ffc371)"
                    }
                }).showToast();
            }
        } catch (error) {
            console.error("Error fetching buildings:", error);
        }
    }
    getListBuildings()

    // Hàm hiển thị danh sách tòa nhà
    const displayBuildings = () => {
        const buildingsListDiv = document.getElementById('buildings-list');
        buildingsListDiv.innerHTML = ''; // Xóa nội dung cũ trước khi thêm mới

        buildings.forEach(building => {
            const buildingRow = document.createElement('div');
            buildingRow.classList.add('col-md-4', 'mb-4', 'building-item'); // Cột kiểu bootstrap

            buildingRow.innerHTML = `
                <div class="card ${selectedBuildingId === building._id ? 'selected' : ''}" data-id="${building._id}" style="font-size: 14px; padding: 10px;">
                    <div class="card-body" style="padding: 1px;">
                        <h6 class="card-title" style="font-size: 16px;">${building.nameBuilding}</h6>
                         <span style="font-size: small; color: #777;">Địa chỉ: <span style="font-size: small; color: #363636;">${building.address ?? 'N/A'}</span> </span>
                    </div>
                </div>
            `;

            // Thêm sự kiện click để chọn tòa nhà
            buildingRow.addEventListener('click', () => selectBuilding(building._id));

            buildingsListDiv.appendChild(buildingRow); // Thêm phần tử vào danh sách
        });
    }
    // Hàm để chọn tòa nhà
    const selectBuilding = (buildingId) => {
        selectedBuildingId = buildingId;
        console.log("Selected Building ID: ", selectedBuildingId);

        // Cập nhật lại giao diện để đánh dấu item đã chọn
        const buildingItems = document.querySelectorAll('.building-item .card');
        buildingItems.forEach(item => {
            item.classList.remove('selected'); // Xóa class 'selected' khỏi tất cả các item
        });

        const selectedItem = document.querySelector(`.building-item .card[data-id="${buildingId}"]`);
        if (selectedItem) {
            selectedItem.classList.add('selected'); // Thêm class 'selected' vào item được chọn
        }

        filterStatistic(isMonthLoad)
    }

    document.addEventListener("DOMContentLoaded", () => {

        const currentMonth = (new Date().getMonth() + 1).toString().padStart(2, '0'); // Tháng hiện tại (đảm bảo 2 chữ số)
        // Đặt giá trị mặc định cho dropdown tháng
        const monthYearDropdown = document.getElementById('month-year');
        monthYearDropdown.value = currentMonth;
        console.log("Tháng được chọn:", currentMonth);

        const currentYear = new Date().getFullYear(); // Lấy năm hiện tại

        $('#yearPicker').datepicker({
            format: "yyyy", // Hiển thị chỉ năm
            minViewMode: 2, // Chỉ cho phép chọn năm
            autoclose: true, // Tự động đóng khi chọn
            defaultViewDate: { year: currentYear }, // Hiển thị năm hiện tại
        }).datepicker('setDate', new Date(currentYear, 0, 1)) // Đặt giá trị mặc định
            .on("changeDate", function (e) {
                selectedYear = e.format();
                filterStatistic(isMonthLoad)
                console.log("Năm đã chọn:", selectedYear);
            });
    });

    // Tạo dropdown tháng
    const monthYearDropdown = document.getElementById('month-year');
    for (let month = 1; month <= 12; month++) {
        const monthOption = document.createElement('option');
        const formattedMonth = String(month).padStart(2, '0');  // Đảm bảo là 2 chữ số
        monthOption.value = `${formattedMonth}`;
        monthOption.textContent = `${formattedMonth}`;

        monthYearDropdown.appendChild(monthOption);
    }
    // Hàm xử lý sự kiện chọn tháng
    monthYearDropdown.addEventListener("change", function () {
        if (monthYearDropdown.value !== "") {
            isMonthLoad = true
            selectedMonth = parseInt(monthYearDropdown.value);
            selectedYear = currentDate.getFullYear();
            console.log("Đã chọn tháng :", selectedMonth)
        } else {
            isMonthLoad = false
            selectedMonth = ""
            console.log("Tháng đã được reset về giá trị rỗng.");
        }
        filterStatistic(isMonthLoad)
    });

    filterStatistic(isMonthLoad)

    async function filterStatistic(isMonthLoad) {
        // await getListBuildings()
        if (isMonthLoad) {
            fiterByMonthYear(selectedBuildingId, selectedMonth, selectedYear)
        } else {
            filterByYear(selectedBuildingId, selectedYear)
        }
    }

    async function fiterByMonthYear(buildingId, selectedMonth, selectedYear) {
        try {
            const queryParams = new URLSearchParams({
                month: selectedMonth,
                year: selectedYear
            })
            const res = await fetch(`http://localhost:3000/api/stt_mgr/${buildingId}/monthly?${queryParams.toString()}`);
            const data = await res.json();

            if (res.ok) {
                displayStatistic(data.revenueData, data.expenseData, data.profitData, data.incomeDetails, data.details)
            } else {
                console.error('Không thể lấy dữ liệu thống kê:', data.message);
            }
        } catch (error) {
            console.error('Lỗi khi lấy dữ liệu thống kê:', error);
        }
    }

    async function filterByYear(buildingId, selectedYear) {
        try {
            const queryParams = new URLSearchParams({
                year: selectedYear
            })
            const res = await fetch(`http://localhost:3000/api/stt_mgr/${buildingId}/yearly?${queryParams.toString()}`);
            const data = await res.json();

            if (res.ok) {
                displayStatistic(data.revenueData, data.expenseData, data.profitData, data.incomeDetails, data.details)
            } else {
                console.error('Không thể lấy dữ liệu thống kê:', data.message);
            }
        } catch (error) {
            console.error('Lỗi khi lấy dữ liệu thống kê:', error);
        }
    }

    function displayStatistic(revenueData, expenseData, profitData, incomeDetails, details) {
        const container = document.querySelector('.container');

        // Xóa nội dung cũ (nếu có)
        const existingStatDiv = document.getElementById('statistics-section');
        if (existingStatDiv) {
            existingStatDiv.remove();
        }

        console.log("data details :", details)

        // Kiểm tra nếu expenseDetails là mảng hợp lệ
        if (!Array.isArray(details)) {
            console.error("expenseDetails is not a valid array", details);
            details = []; // Nếu không hợp lệ, gán giá trị mặc định là mảng rỗng
        }

        // Tạo một div mới để chứa thống kê
        const statisticsDiv = document.createElement('div');
        statisticsDiv.id = 'statistics-section';
        statisticsDiv.classList.add('row', 'mt-4', 'border-top', 'pt-3');

        statisticsDiv.innerHTML = `
        <div class="col-md-6 mb-3">
            <div class="card shadow-sm">
                <div class="card-body text-center">
                    <h5 class="card-title text-primary">Doanh thu</h5>
                    <p class="card-text font-weight-bold text-success" style="font-size: 18px;">${revenueData.toLocaleString()} VND</p>

                    <!-- Icon mũi tên -->
                    <button id="toggleDetailsBtn" class="btn border">
                        <i id="toggleIcon-1" class="fa fa-chevron-down"></i> Xem chi tiết
                    </button>

                     <!-- Dữ liệu chi tiết -->
                     <div id="seeDetails-1" class="expense-details" style="display: none;">
                        <ul>
                            ${incomeDetails.map(detail => `
                                <li>
                                    <span class="title">• ${detail.service_name === "Other" ? 'Dịch vụ chung' : detail.service_name === "Wifi" ? 'Internet' : detail.service_name } :</span><br>
                                    <span class="amount" style="padding-left: 30px">‣ ${detail.total.toLocaleString()} VND</span>
                                </li>
                            `).join('')}
                        </ul>
                    </div>

                </div>
            </div>
        </div>
        <div class="col-md-6 mb-3">
            <div class="card shadow-sm">
                <div class="card-body text-center">
                    <h5 class="card-title text-primary">Chi phí</h5>
                    <p class="card-text font-weight-bold text-danger" style="font-size: 18px;">${expenseData.toLocaleString()} VND</p>

                    <!-- Icon mũi tên -->
                    <button id="toggleDetailsBtn" class="btn border">
                        <i id="toggleIcon-2" class="fa fa-chevron-down"></i> Xem chi tiết
                    </button>

                     <!-- Dữ liệu chi tiết -->
                     <div id="seeDetails-2" class="expense-details" style="display: none;">
                        <ul>
                            ${details.map(detail => `
                                <li>
                                    <span class="title">• ${detail.service_name} :</span><br>
                                    <span class="amount" style="padding-left: 30px">‣ ${detail.total.toLocaleString()} VND</span>
                                </li>
                            `).join('')}
                        </ul>
                    </div>

                </div>
            </div>
        </div>
        `;

        // Thêm phần thống kê vào container chính
        container.appendChild(statisticsDiv);

        // Xử lý sự kiện toggle cho nút "Xem chi tiết"
        document.querySelectorAll('.btn').forEach((btn, index) => {
            btn.addEventListener('click', function () {
                const detailsDiv = document.getElementById(`seeDetails-${index + 1}`);
                const toggleIcon = document.getElementById(`toggleIcon-${index + 1}`);

                if (detailsDiv.style.display === 'none') {
                    detailsDiv.style.display = 'block'; // Hiển thị chi tiết
                    toggleIcon.classList.remove('fa-chevron-down');
                    toggleIcon.classList.add('fa-chevron-up'); // Chuyển icon thành mũi tên lên
                } else {
                    detailsDiv.style.display = 'none'; // Ẩn chi tiết
                    toggleIcon.classList.remove('fa-chevron-up');
                    toggleIcon.classList.add('fa-chevron-down'); // Chuyển icon thành mũi tên xuống
                }
            });
        });
    }

</script>

</html>